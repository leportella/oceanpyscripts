# -*- coding: utf-8 -*-
"""
Created on Sun Dec 13 13:59:29 2015

@author: leportella
"""

import netCDF4 as nc
import numpy as np
from math import radians, sin
from datetime import datetime


def GetVariables(filenc):
    """
    Function to get all variables from a nectdf file into a dictionary.

    Examples:
        import netCDF4
        file = netCDF4.Dataset('file.nc')
        out = ncwork.GetVariables(file) """
        
    #sanity check
    if type(filenc) != nc._netCDF4.Dataset: 
        print 'The file is not in the right format'
    else: 
        listt = []
        for v in filenc.variables: listt.append(v)
    
        varr={}
        for tt in listt: 
          varr[tt]=filenc.variables[tt][:]
        return varr
    
    
def CalculateCoriolis(y_rho):
    """
    Helpful for ROMS grids
    Calculate Coriolis Acceleration in rho points. As Coriolis only uses latitude
    the input must be the y_rho variable
        out = CalculateCoriolis(y_rho)
        out is an array with same size as y_rho
    """
    f=np.zeros(shape=(len(y_rho),len(y_rho[0])))
    for yy in range(0,len(y_rho)):
        for xx in range(0,len(y_rho[yy])):
            if y_rho[yy][xx] > -999:
                f[yy][xx] = 2*(7.2921*10**-5)*sin(radians(y_rho[yy][xx]))
    return f


def rgfgrid2ROMS(filenc):
    """
    Gets a nc grid file generated by RGFRIG    
    Bathymetry should be positive down
        
    """
        
    #sanity check
    if type(filenc) != nc._netCDF4.Dataset: 
        print 'The file is not in the right format'
    else:
        grd = GetVariables(filenc)
        ng={}
        
        if 'lon_rho' in grd: 
            ng['lon_rho'] = grd['lon_rho'][1:-2,1:-2]
            ng['lat_rho'] = grd['lat_rho'][1:-2,1:-2]
            ng['lon_psi'] = grd['lon_psi'][1:-2,1:-2]
            ng['lat_psi'] = grd['lat_psi'][1:-2,1:-2]
            ng['lon_u'] = grd['lon_u'][1:-2,1:-2]
            ng['lat_u'] = grd['lat_u'][1:-2,1:-2]
            ng['lon_v'] = grd['lon_v'][1:-2,1:-2]
            ng['lat_v'] = grd['lat_v'][1:-2,1:-2]
            
            print 'xsi psi = ' + str(len(ng['lon_psi'][0]))        
            print 'xsi rho = ' + str(len(ng['lon_rho'][0]))
            print 'xsi u = ' + str(len(ng['lon_u'][0]))
            print 'xsi v = ' + str(len(ng['lon_v'][0]))
            print 'eta psi = ' + str(len(ng['lon_psi']))
            print 'eta rho = ' + str(len(ng['lon_rho']))
            print 'eta u = ' + str(len(ng['lon_u']))
            print 'eta v = ' + str(len(ng['lon_v']))   
                
        else:
            ng['x_rho'] = grd['x_rho'][1:-2,1:-2]
            ng['y_rho'] = grd['y_rho'][1:-2,1:-2]
            ng['x_psi'] = grd['x_psi'][1:-2,1:-2]
            ng['y_psi'] = grd['y_psi'][1:-2,1:-2]
            ng['x_u'] = grd['x_u'][1:-2,1:-2]
            ng['y_u'] = grd['y_u'][1:-2,1:-2]
            ng['x_v'] = grd['x_v'][1:-2,1:-2]
            ng['y_v'] = grd['y_v'][1:-2,1:-2]
            
            print 'xsi psi = ' + str(len(ng['x_psi'][0]))        
            print 'xsi rho = ' + str(len(ng['x_rho'][0]))
            print 'xsi u = ' + str(len(ng['x_u'][0]))
            print 'xsi v = ' + str(len(ng['x_v'][0]))
            print 'eta psi = ' + str(len(ng['x_psi']))
            print 'eta rho = ' + str(len(ng['x_rho']))
            print 'eta u = ' + str(len(ng['x_u']))
            print 'eta v = ' + str(len(ng['x_v']))               
            
        bat = grd['h'][1:-2,1:-2]            
        bat = bat[:]
        #bat[bat<3]=3
        ng['h']=bat[:]
        
        return ng


def CreateMask(dic):
        """    
        ng = CreateMask(dic)

        
        """
        bat=dic['h']
        ng={}
        mask=np.zeros([len(bat),len(bat[0])])
        for i in range(len(bat)):
            for j in range(len(bat[i])):
                if bat[i,j]>0: mask[i,j]=1
        
        try: 
            u = dic['lon_u']
        except:
            u = dic['x_u']
        masku=np.zeros([len(u),len(u[0])])
        for i in range(len(u)):
            for j in range(len(u[i])):
                if mask[i,j]==1: masku[i,j]=1
        try:         
            v = dic['lon_v']
        except:
            v = dic['x_v']   
        maskv=np.zeros([len(v),len(v[0])])
        for i in range(len(v)):
            for j in range(len(v[i])):       
                if mask[i,j]==1: maskv[i,j]=1
        try:            
            p = dic['lon_psi']
        except:
            p = dic['x_psi']
        maskp=np.zeros([len(p),len(p[0])])
        for i in range(len(p)):
            for j in range(len(p[i])):     
                if mask[i,j]==0 or mask[i+1,j]==0: maskp[i,j]=0
                else: maskp[i,j]=1        
                
        ng['mask_rho'] = mask
        ng['mask_psi'] = maskp
        ng['mask_u'] = masku
        ng['mask_v'] = maskv
        
        return ng
        
        
def InsertGridDimensions(filenc,dirin):
    """
    """
    #sanity check
    if type(filenc) != nc._netCDF4.Dataset: 
        print 'The file is not in the right format'
    else:
        filenc.variables['lon_rho'][:] = dirin['lon_rho'][:]
        filenc.variables['lat_rho'][:] = dirin['lat_rho'][:]
        filenc.variables['lon_psi'][:] = dirin['lon_psi'][:]
        filenc.variables['lat_psi'][:] = dirin['lat_psi'][:]
        filenc.variables['lon_u'][:] = dirin['lon_u'][:]
        filenc.variables['lat_u'][:] = dirin['lat_u'][:]
        filenc.variables['lon_v'][:] = dirin['lon_v'][:]
        filenc.variables['lat_v'][:] = dirin['lat_v'][:]
        filenc.variables['x_rho'][:] = dirin['x_rho'][:]
        filenc.variables['y_rho'][:] = dirin['y_rho'][:]
        filenc.variables['x_psi'][:] = dirin['x_psi'][:]
        filenc.variables['y_psi'][:] = dirin['y_psi'][:]
        filenc.variables['x_u'][:] = dirin['x_u'][:]
        filenc.variables['y_u'][:] = dirin['y_u'][:]
        filenc.variables['x_v'][:] = dirin['x_v'][:]
        filenc.variables['y_v'][:] = dirin['y_v'][:]            
        filenc.variables['dmde'][:] = dirin['dmde'][:]
        filenc.variables['dndx'][:] = dirin['dndx'][:]
        filenc.variables['pm'][:] = dirin['pm'][:]
        filenc.variables['pn'][:] = dirin['pn'][:]        
        filenc.variables['f'][:] = dirin['f'][:]  
        filenc.variables['h'][:] = dirin['h'][:] 
        filenc.variables['angle'][:] = dirin['angle'][:]
        filenc.variables['mask_rho'][:]=dirin['mask_rho'][:]
        filenc.variables['mask_psi'][:]=dirin['mask_psi'][:]
        filenc.variables['mask_u'][:]=dirin['mask_u'][:]
        filenc.variables['mask_v'][:]=dirin['mask_v'][:]
        
    return 'ok'
    
    
def geo2UTM(lon,lat,myproj):  
    x = np.zeros([len(lon),len(lon[0])])
    y = np.zeros([len(lon),len(lon[0])])

    for i in range(len(lon)):
        for j in range(len(lon[0])):
            x[i,j], y[i,j] = myproj(lon[i,j], lat[i,j])
    return x,y


def UTM2geo(x,y,myproj):  
    lon = np.zeros([len(x),len(x[0])])
    lat = np.zeros([len(x),len(x[0])])

    for i in range(len(x)):
        for j in range(len(x[0])):
            lon[i,j], lat[i,j] = myproj(x[i,j], y[i,j], inverse=True)
    return lon, lat
    
    
def ReadROMSResults(run, grid, num_files, uv=False):
    data = {}
    
    for num in range(1, num_files):
        f = ('/home/leportella/cluster/run/{}/'
             'ocean_his_{}_000{}.nc').format(run, grid, num)
        model = nc.Dataset(f, 'r')
    
        if num == 1:
            reftime = np.array(model.variables['ocean_time'][:])
            zeta = np.array(model.variables['zeta'][:])
            if uv:
                ubar = np.array(model.variables['ubar_eastward'][:])
                vbar = np.array(model.variables['vbar_northward'][:])
            data['lonr'] = np.array(model.variables['lon_rho'][:])
            data['latr'] = np.array(model.variables['lat_rho'][:])
        else:
            reftime = np.hstack(
                (reftime, np.array(model.variables['ocean_time'][:]))
            )
            zeta = np.concatenate(
                (zeta, np.array(model.variables['zeta'][:])),
                axis=0
            )
            if uv:
                ubar = np.concatenate(
                    (ubar, np.array(model.variables['ubar_eastward'][:])),
                    axis=0
                )
                vbar = np.concatenate(
                    (vbar, np.array(model.variables['vbar_northward'][:])),
                    axis=0
                )
    
        data['reftime'] = reftime
        data['zeta'] = zeta
        if uv:
            data['u'] = ubar
            data['v'] = vbar
        return data


def FindTimeVector(refdate, timevector, delta='seconds'):
    """
    Given a time vector from ROMS input, it gives the real time vector
    based on the refdate 
    """
    time = []
    initdate = datetime(int(refdate[0:4]),
                                 int(refdate[4:6]), 
                                 int(refdate[6:]),
                                 0, 0, 0)
    for t in timevector:
        if delta=='seconds':
            time.append(np.add(initdate, timedelta(seconds=int(t))))
        elif delta=='days':
            time.append(np.add(initdate, timedelta(days=int(t))))
        elif delta=='hours':
            time.append(np.add(initdate, timedelta(hours=int(t))))
    return time